/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testSystem;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.*;


/**
 *
 * @author Alejandro, Alec, Zane, Tucker
 * @version 12/5/14
 *
 */
public class MainFrame extends javax.swing.JFrame {
    
    
    // The Test System Object that holds all users Tests and Classes.
    private TestSystem testSystem;
    
    // These are the different panels
    private panels.Login login;
    private panels.StudentMenu studentMenu;
    private panels.InstructorMenu instructorMenu;
    private panels.AdminMenu adminMenu;
    private panels.StudentCourse studentClass;
    private panels.AccountSettings accountSettings;
    private panels.CreateAccount createAccount;

    /**
     * Creates new form accountSettings
     */
    public MainFrame() {
        this.loadSystem();
        initComponents(); 
        startPanels();  //initialize the panels
        begin(); // load first panel
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backPanel = new javax.swing.JPanel();
        cardPanel = new javax.swing.JPanel();
        quitButton = new javax.swing.JButton();
        signOutButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(880, 600));

        backPanel.setBackground(java.awt.Color.darkGray);
        backPanel.setMaximumSize(new java.awt.Dimension(888, 636));
        backPanel.setMinimumSize(new java.awt.Dimension(888, 636));
        backPanel.setPreferredSize(new java.awt.Dimension(888, 636));

        cardPanel.setMaximumSize(new java.awt.Dimension(860, 560));
        cardPanel.setMinimumSize(new java.awt.Dimension(860, 560));
        cardPanel.setPreferredSize(new java.awt.Dimension(860, 560));
        cardPanel.setLayout(new java.awt.CardLayout());

        quitButton.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        signOutButton.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        signOutButton.setText("Sign Out");
        signOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backPanelLayout = new javax.swing.GroupLayout(backPanel);
        backPanel.setLayout(backPanelLayout);
        backPanelLayout.setHorizontalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE)
                    .addGroup(backPanelLayout.createSequentialGroup()
                        .addComponent(signOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        backPanelLayout.setVerticalGroup(
            backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backPanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(cardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(backPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(signOutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quitButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        saveSystem();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void signOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutButtonActionPerformed
        changePanel(this.login);
    }//GEN-LAST:event_signOutButtonActionPerformed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backPanel;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton signOutButton;
    // End of variables declaration//GEN-END:variables


    /**
     * Load System from a file or a new System.
     */
    private void loadSystem() {
        String fileName = JOptionPane.showInputDialog(this,
                "Enter the name of the file containing a test system or"
                + "click cancel to create a new one");
        if (fileName != null) {
            this.testSystem = deserializeTestSystem(fileName);
        }
        else
            this.testSystem = new TestSystem();
    }
    
    /**
     * Save System to a file.
     */
    private void saveSystem() {
        int option;
        String fileName = JOptionPane.showInputDialog(this,
                "Enter the name of the file you wish to save the TestSystem in or"
                + "click cancel to discard any changes");
        if (fileName != null && !fileName.equals("")) {
            serializeTestSystem(this.testSystem.getUsers(), this.testSystem.getClasses(), fileName);
            JOptionPane.showMessageDialog(new JFrame(), "System saved in file: " + fileName);
            System.exit(0);
        }
        else {
            option = JOptionPane.showConfirmDialog(this,
                    "Are you sure you wish to quit without saving the system?");
            if (option == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
    }
    
        public void serializeTestSystem(ArrayList<User> users1, ArrayList<Course> classes1, String fileName) {

       TestSystem testSystem = new TestSystem();
       testSystem.setUsers(users1);
       testSystem.setClasses(classes1);
       
       String homeDir = "/home/sstoneman1/Dropbox/Comp350/SemesterProject/" + fileName;

       try{

            FileOutputStream fout = new FileOutputStream(fileName);
            ObjectOutputStream oos = new ObjectOutputStream(fout);   
            oos.writeObject(testSystem);
            oos.close();
            JOptionPane.showMessageDialog(new JFrame(), "Save System to file PASSED.");

       }catch(Exception ex){
               ex.printStackTrace();
            JOptionPane.showMessageDialog(new JFrame(), "Save System to file FAILED.");
       }
    }
    
    
    /**
     * Paint the first screen.
     */
    private void begin() {
        cardPanel.add(login);
    }
    
   
    /**
     * Initializes Panel Variables.
     */
    private void startPanels() {
        this.login = new panels.Login(this);
        this.studentMenu = new panels.StudentMenu(this);
        this.studentClass = new panels.StudentCourse(this);
        this.instructorMenu = new panels.InstructorMenu(this);
        this.adminMenu = new panels.AdminMenu(this);
        this.accountSettings = new panels.AccountSettings(this);
        this.createAccount = new panels.CreateAccount(this);
    }
    
    
    public TestSystem deserializeTestSystem(String fileName){
        
        String homeDir = fileName;
        TestSystem testSystem;
        
        try{

            FileInputStream fin = new FileInputStream(homeDir);
            ObjectInputStream ois = new ObjectInputStream(fin);
            testSystem = (TestSystem) ois.readObject();
            ois.close();

            JOptionPane.showMessageDialog(new JFrame(), "Load System from file PASSED.");
            return testSystem;

        }catch(Exception ex){
            ex.printStackTrace();
            JOptionPane.showMessageDialog(new JFrame(), "Load System from file FAILED.");
            return null;
        } 
    }
    
    
    /**
     * Search through Users.
     * @return user
     */
    public User searchUsers(String name, String pass) {
        return this.testSystem.pass(name,pass);        
    }
    
    // Change to another panel
    public void changePanel(JPanel panel) {
        cardPanel.removeAll();
        cardPanel.repaint();
        cardPanel.revalidate();
        
        
        cardPanel.add(panel);
        cardPanel.repaint();
        cardPanel.revalidate();
    }
    
    public JPanel getCardPanel() {
        return this.cardPanel;
    }
    
    
    /**
     * TestSystem object access.
     * @return testSystem
     */
    public TestSystem getTestSystem() {
        return this.testSystem;
    }
    
    
    /**
     * Course List object access.
     * @return allCourses
     */
    public ArrayList<Course> getAllCourses() {
        return this.testSystem.getClasses();
    }
    
    /**
     * Adding a class to the TestSystem.
     */
    public void addCourse(Course course) {
        this.testSystem.addCourse(course);
    }
    
    /**
     * Adding a test to a class.
     */
    public void addTestCourse(String course, Test test) {
        this.testSystem.getCourse(course).addTest(test);
    }
    
    
    //  Frame accessor Methods.
    //  Used to switch panels from inside another panel.
    
    
    /**
     * Login frame access.
     * @return login
     */
    public JPanel getLogin() {
        return this.login;
    }
        
    /**
     * StudentMenu frame access.
     * @return studentMenu
     */
    public JPanel getStudentMenu(User user) throws FileNotFoundException {
        this.studentMenu.setUser(user);
        return this.studentMenu;
    }
    
    /**
     * StudentMenu frame access.
     * @return studentClass
     */
    public JPanel getStudentClass() {
        return this.studentClass;
    }
    
    /**
     * InstructorMenu frame access.
     * @return instructorMenu
     */
    public JPanel getInstructorMenu(User user) {
        this.instructorMenu.setUser(user);
        return this.instructorMenu;
    }
    
    /**
     * Admin frame access.
     * @return AdminMenu
     */
    public JPanel getAdminMenu(User user) {
        this.adminMenu.setUser(user);
        return this.adminMenu;
    }
    
       
    
    /**
     * AccountSettings frame access.
     * @return accountSettings
     */
    public JPanel getAccountSettings(User user) {
        this.accountSettings.setUser(user);
        return this.accountSettings;
    }
    
    /**
     * CreateAccount frame access.
     * @return createAccount
     */
    public JPanel getCreateAccount() {
        this.createAccount.clearFields();
        return this.createAccount;
    }
    
    
}
